@page "/"
@inject IJSRuntime JsRuntime;
@inject AnalysisService ForecastService
@inject AppStateService AppState

@using WebApplication.Data
@using WebApplication.Shared.Components

<div class="container-fluid">
    <div class="row">
        <div class="col-md-5 col-sm-12">
            <div class="row">
                <div class="col-12">
                    <h1>Program</h1>

                    @if (examplePrograms == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <label for="exampleProgram">Example Program: </label>
                        <select id="exampleProgram" @bind="source">
                            @foreach (var program in examplePrograms)
                            {
                                <option value="@program.Value">@program.Key</option>
                            }
                        </select>
                    }

                    <textarea id="editor" @bind-value="source" @bind-value:event="oninput"></textarea>
                    <div class="p-3 mb-2 text-white @(String.IsNullOrEmpty(error) ? "bg-success" : "bg-danger")">@error</div>
                    <div class="form-group">
                        <AnalysisPickerComponent OnSelect="Parse" />
                        <WorklistPickerComponent OnSelect="Parse" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <h1>Flow Graph</h1>
                    <div id="imageDiv"></div>
                </div>
            </div>
        </div>

        <div class="col-md-7 col-sm-12">
            <button class="btn btn-primary mt-2" @onclick="ViewAnalysisResults">Show analysis</button>
            <button class="btn btn-primary mt-2" @onclick="ViewIterationSteps">Show iteration steps</button>
            <div class="row">
                <div class="col-12 @AnalysisResultClass">
                    <AnalysisTableComponent 
                        Title="@AppState.SelectedAnalysis.ToString()"
                        Results="@analysis"
                    />
                </div>
                <div class="col-12 @WorklistResultClass">
                    <WorklistTableComponent Title="@AppState.SelectedWorklist.ToString()"
                                            Results="@worklist" />
                </div>
            </div>
        </div>
    </div>
</div>

@code
{
    Dictionary<string, string> examplePrograms;

    string error = "";
    private string _source = "{\n  int x;\n  int y;\n  x := 0;\n  y := 1;\n}";

    List<AnalysisResult> analysis = new List<AnalysisResult>();
    List<WorklistResult> worklist = new List<WorklistResult>();

    string source
    {
        get => _source;
        set
        {
            _source = value;
            Parse();
        }
    }

    string AnalysisResultClass { get; set; }
    string WorklistResultClass { get; set; }

    async void Parse()
    {
        Console.WriteLine("parse");

        try
        {
            var graph = ForecastService.GetGraph(source);

            Console.WriteLine(AppState.SelectedAnalysis.ToString());
            analysis = ForecastService.RunAnalysis(source, AppState.SelectedAnalysis, AppState.SelectedWorklist);
            worklist = ForecastService.GetIterationSteps();

            error = string.Empty;

            await JsRuntime.InvokeAsync<string>("Lib.CreateFlowGraph", graph);
            await JsRuntime.InvokeAsync<string>("Lib.UpdateCodeMirror", source);

            StateHasChanged();
        }
        catch (ArgumentException exception)
        {
            error = exception.Message;
            await JsRuntime.InvokeAsync<string>("Lib.ClearGraph");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            error = ex.GetType().ToString();
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            examplePrograms = AnalysisExamplePrograms.GetPrograms();
            Parse();
            JsRuntime.InvokeAsync<string>("Lib.InitCodeMirror");
        }
    }
    protected override void OnInitialized()
    {
        ViewAnalysisResults();
        AppState.OnChange += StateHasChanged;
    }

    private void ViewAnalysisResults()
    {
        AnalysisResultClass = "d-block";
        WorklistResultClass = "d-none";
    }

    private void ViewIterationSteps()
    {
        AnalysisResultClass = "d-none";
        WorklistResultClass = "d-block";
    }

}