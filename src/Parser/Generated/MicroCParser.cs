//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sindrip/school/programanalysis/analysis-tool/src/Parser/MicroC.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class MicroCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		INT=1, IF=2, ELSE=3, WHILE=4, READ=5, WRITE=6, TRUE=7, FALSE=8, NOT=9, 
		EQ=10, NOTEQ=11, LTEQ=12, GTEQ=13, ASSIGN=14, LT=15, GT=16, OR=17, AND=18, 
		PLUS=19, MINUS=20, MULT=21, DIV=22, MOD=23, LBRACE=24, RBRACE=25, LPAREN=26, 
		RPAREN=27, LBRACKET=28, RBRACKET=29, SEMICOLON=30, COMMA=31, DOT=32, NUMBER=33, 
		IDENT=34, WHITESPACE=35;
	public const int
		RULE_parse = 0, RULE_globalBlock = 1, RULE_scopedBlock = 2, RULE_unscopedBlock = 3, 
		RULE_declaration = 4, RULE_fieldDeclaration = 5, RULE_statement = 6, RULE_a_expr = 7, 
		RULE_b_expr = 8;
	public static readonly string[] ruleNames = {
		"parse", "globalBlock", "scopedBlock", "unscopedBlock", "declaration", 
		"fieldDeclaration", "statement", "a_expr", "b_expr"
	};

	private static readonly string[] _LiteralNames = {
		null, "'int'", "'if'", "'else'", "'while'", "'read'", "'write'", "'true'", 
		"'false'", "'not'", "'=='", "'!='", "'<='", "'>='", "':='", "'<'", "'>'", 
		"'|'", "'&'", "'+'", "'-'", "'*'", "'/'", "'%'", "'{'", "'}'", "'('", 
		"')'", "'['", "']'", "';'", "','", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "INT", "IF", "ELSE", "WHILE", "READ", "WRITE", "TRUE", "FALSE", 
		"NOT", "EQ", "NOTEQ", "LTEQ", "GTEQ", "ASSIGN", "LT", "GT", "OR", "AND", 
		"PLUS", "MINUS", "MULT", "DIV", "MOD", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
		"LBRACKET", "RBRACKET", "SEMICOLON", "COMMA", "DOT", "NUMBER", "IDENT", 
		"WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MicroC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MicroCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MicroCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MicroCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ParseContext : ParserRuleContext {
		public GlobalBlockContext globalBlock() {
			return GetRuleContext<GlobalBlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(MicroCParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; globalBlock();
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalBlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(MicroCParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(MicroCParser.RBRACE, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public GlobalBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterGlobalBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitGlobalBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalBlockContext globalBlock() {
		GlobalBlockContext _localctx = new GlobalBlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 21; Match(LBRACE);
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT || _la==LBRACE) {
				{
				{
				State = 22; declaration();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 29;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 28; statement();
				}
				}
				State = 31;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << READ) | (1L << WRITE) | (1L << IDENT))) != 0) );
			State = 33; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScopedBlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(MicroCParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(MicroCParser.RBRACE, 0); }
		public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ScopedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scopedBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterScopedBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitScopedBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScopedBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScopedBlockContext scopedBlock() {
		ScopedBlockContext _localctx = new ScopedBlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_scopedBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35; Match(LBRACE);
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT || _la==LBRACE) {
				{
				{
				State = 36; declaration();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 42; statement();
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << READ) | (1L << WRITE) | (1L << IDENT))) != 0) );
			State = 47; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnscopedBlockContext : ParserRuleContext {
		public ITerminalNode LBRACE() { return GetToken(MicroCParser.LBRACE, 0); }
		public ITerminalNode RBRACE() { return GetToken(MicroCParser.RBRACE, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public UnscopedBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unscopedBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterUnscopedBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitUnscopedBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnscopedBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UnscopedBlockContext unscopedBlock() {
		UnscopedBlockContext _localctx = new UnscopedBlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_unscopedBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(LBRACE);
			State = 51;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 50; statement();
				}
				}
				State = 53;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << WHILE) | (1L << READ) | (1L << WRITE) | (1L << IDENT))) != 0) );
			State = 55; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
	 
		public DeclarationContext() { }
		public virtual void CopyFrom(DeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclContext : DeclarationContext {
		public ITerminalNode INT() { return GetToken(MicroCParser.INT, 0); }
		public ITerminalNode LBRACKET() { return GetToken(MicroCParser.LBRACKET, 0); }
		public ITerminalNode NUMBER() { return GetToken(MicroCParser.NUMBER, 0); }
		public ITerminalNode RBRACKET() { return GetToken(MicroCParser.RBRACKET, 0); }
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public ArrayDeclContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterArrayDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitArrayDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RecDeclContext : DeclarationContext {
		public IToken name;
		public ITerminalNode LBRACE() { return GetToken(MicroCParser.LBRACE, 0); }
		public FieldDeclarationContext[] fieldDeclaration() {
			return GetRuleContexts<FieldDeclarationContext>();
		}
		public FieldDeclarationContext fieldDeclaration(int i) {
			return GetRuleContext<FieldDeclarationContext>(i);
		}
		public ITerminalNode RBRACE() { return GetToken(MicroCParser.RBRACE, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(MicroCParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(MicroCParser.SEMICOLON, i);
		}
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public RecDeclContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterRecDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitRecDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRecDecl(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntDeclContext : DeclarationContext {
		public ITerminalNode INT() { return GetToken(MicroCParser.INT, 0); }
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public IntDeclContext(DeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterIntDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitIntDecl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntDecl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 8, RULE_declaration);
		int _la;
		try {
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				_localctx = new IntDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 57; Match(INT);
				State = 58; Match(IDENT);
				State = 59; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ArrayDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 60; Match(INT);
				State = 61; Match(LBRACKET);
				State = 62; Match(NUMBER);
				State = 63; Match(RBRACKET);
				State = 64; Match(IDENT);
				State = 65; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new RecDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 66; Match(LBRACE);
				State = 67; fieldDeclaration();
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==SEMICOLON) {
					{
					{
					State = 68; Match(SEMICOLON);
					State = 69; fieldDeclaration();
					}
					}
					State = 74;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 75; Match(RBRACE);
				State = 76; ((RecDeclContext)_localctx).name = Match(IDENT);
				State = 77; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(MicroCParser.INT, 0); }
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(INT);
			State = 82; Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AssignArrayStmtContext : StatementContext {
		public A_exprContext index;
		public A_exprContext value;
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public ITerminalNode LBRACKET() { return GetToken(MicroCParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(MicroCParser.RBRACKET, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MicroCParser.ASSIGN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		public AssignArrayStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAssignArrayStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAssignArrayStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignArrayStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignRecStmtContext : StatementContext {
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MicroCParser.ASSIGN, 0); }
		public ITerminalNode LPAREN() { return GetToken(MicroCParser.LPAREN, 0); }
		public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		public ITerminalNode RPAREN() { return GetToken(MicroCParser.RPAREN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(MicroCParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(MicroCParser.COMMA, i);
		}
		public AssignRecStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAssignRecStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAssignRecStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignRecStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileStmtContext : StatementContext {
		public ITerminalNode WHILE() { return GetToken(MicroCParser.WHILE, 0); }
		public ITerminalNode LPAREN() { return GetToken(MicroCParser.LPAREN, 0); }
		public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MicroCParser.RPAREN, 0); }
		public UnscopedBlockContext unscopedBlock() {
			return GetRuleContext<UnscopedBlockContext>(0);
		}
		public WhileStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterWhileStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitWhileStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadArrStmtContext : StatementContext {
		public A_exprContext index;
		public ITerminalNode READ() { return GetToken(MicroCParser.READ, 0); }
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public ITerminalNode LBRACKET() { return GetToken(MicroCParser.LBRACKET, 0); }
		public ITerminalNode RBRACKET() { return GetToken(MicroCParser.RBRACKET, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public ReadArrStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterReadArrStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitReadArrStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadArrStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfStmtContext : StatementContext {
		public ITerminalNode IF() { return GetToken(MicroCParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(MicroCParser.LPAREN, 0); }
		public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MicroCParser.RPAREN, 0); }
		public UnscopedBlockContext unscopedBlock() {
			return GetRuleContext<UnscopedBlockContext>(0);
		}
		public IfStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadStmtContext : StatementContext {
		public ITerminalNode READ() { return GetToken(MicroCParser.READ, 0); }
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public ReadStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterReadStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitReadStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IfElseStmtContext : StatementContext {
		public UnscopedBlockContext ifBody;
		public UnscopedBlockContext elseBody;
		public ITerminalNode IF() { return GetToken(MicroCParser.IF, 0); }
		public ITerminalNode LPAREN() { return GetToken(MicroCParser.LPAREN, 0); }
		public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MicroCParser.RPAREN, 0); }
		public ITerminalNode ELSE() { return GetToken(MicroCParser.ELSE, 0); }
		public UnscopedBlockContext[] unscopedBlock() {
			return GetRuleContexts<UnscopedBlockContext>();
		}
		public UnscopedBlockContext unscopedBlock(int i) {
			return GetRuleContext<UnscopedBlockContext>(i);
		}
		public IfElseStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterIfElseStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitIfElseStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfElseStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignStmtContext : StatementContext {
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MicroCParser.ASSIGN, 0); }
		public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public AssignStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAssignStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAssignStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignFieldStmtContext : StatementContext {
		public IToken name;
		public IToken field;
		public ITerminalNode DOT() { return GetToken(MicroCParser.DOT, 0); }
		public ITerminalNode ASSIGN() { return GetToken(MicroCParser.ASSIGN, 0); }
		public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(MicroCParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(MicroCParser.IDENT, i);
		}
		public AssignFieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAssignFieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAssignFieldStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignFieldStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteStmtContext : StatementContext {
		public ITerminalNode WRITE() { return GetToken(MicroCParser.WRITE, 0); }
		public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public WriteStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterWriteStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitWriteStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteStmt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadFieldStmtContext : StatementContext {
		public IToken name;
		public IToken field;
		public ITerminalNode READ() { return GetToken(MicroCParser.READ, 0); }
		public ITerminalNode DOT() { return GetToken(MicroCParser.DOT, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(MicroCParser.SEMICOLON, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(MicroCParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(MicroCParser.IDENT, i);
		}
		public ReadFieldStmtContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterReadFieldStmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitReadFieldStmt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadFieldStmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_statement);
		int _la;
		try {
			State = 157;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				_localctx = new AssignStmtContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 84; Match(IDENT);
				State = 85; Match(ASSIGN);
				State = 86; a_expr(0);
				State = 87; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new AssignArrayStmtContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; Match(IDENT);
				State = 90; Match(LBRACKET);
				State = 91; ((AssignArrayStmtContext)_localctx).index = a_expr(0);
				State = 92; Match(RBRACKET);
				State = 93; Match(ASSIGN);
				State = 94; ((AssignArrayStmtContext)_localctx).value = a_expr(0);
				State = 95; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new AssignFieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 97; ((AssignFieldStmtContext)_localctx).name = Match(IDENT);
				State = 98; Match(DOT);
				State = 99; ((AssignFieldStmtContext)_localctx).field = Match(IDENT);
				State = 100; Match(ASSIGN);
				State = 101; a_expr(0);
				State = 102; Match(SEMICOLON);
				}
				break;
			case 4:
				_localctx = new AssignRecStmtContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 104; Match(IDENT);
				State = 105; Match(ASSIGN);
				State = 106; Match(LPAREN);
				State = 107; a_expr(0);
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 108; Match(COMMA);
					State = 109; a_expr(0);
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 115; Match(RPAREN);
				State = 116; Match(SEMICOLON);
				}
				break;
			case 5:
				_localctx = new IfStmtContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 118; Match(IF);
				State = 119; Match(LPAREN);
				State = 120; b_expr(0);
				State = 121; Match(RPAREN);
				State = 122; unscopedBlock();
				}
				break;
			case 6:
				_localctx = new IfElseStmtContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 124; Match(IF);
				State = 125; Match(LPAREN);
				State = 126; b_expr(0);
				State = 127; Match(RPAREN);
				State = 128; ((IfElseStmtContext)_localctx).ifBody = unscopedBlock();
				State = 129; Match(ELSE);
				State = 130; ((IfElseStmtContext)_localctx).elseBody = unscopedBlock();
				}
				break;
			case 7:
				_localctx = new WhileStmtContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 132; Match(WHILE);
				State = 133; Match(LPAREN);
				State = 134; b_expr(0);
				State = 135; Match(RPAREN);
				State = 136; unscopedBlock();
				}
				break;
			case 8:
				_localctx = new ReadStmtContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 138; Match(READ);
				State = 139; Match(IDENT);
				State = 140; Match(SEMICOLON);
				}
				break;
			case 9:
				_localctx = new ReadArrStmtContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 141; Match(READ);
				State = 142; Match(IDENT);
				State = 143; Match(LBRACKET);
				State = 144; ((ReadArrStmtContext)_localctx).index = a_expr(0);
				State = 145; Match(RBRACKET);
				State = 146; Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ReadFieldStmtContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 148; Match(READ);
				State = 149; ((ReadFieldStmtContext)_localctx).name = Match(IDENT);
				State = 150; Match(DOT);
				State = 151; ((ReadFieldStmtContext)_localctx).field = Match(IDENT);
				State = 152; Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new WriteStmtContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 153; Match(WRITE);
				State = 154; a_expr(0);
				State = 155; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class A_exprContext : ParserRuleContext {
		public A_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_a_expr; } }
	 
		public A_exprContext() { }
		public virtual void CopyFrom(A_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AexprRecAccessContext : A_exprContext {
		public IToken name;
		public IToken field;
		public ITerminalNode DOT() { return GetToken(MicroCParser.DOT, 0); }
		public ITerminalNode[] IDENT() { return GetTokens(MicroCParser.IDENT); }
		public ITerminalNode IDENT(int i) {
			return GetToken(MicroCParser.IDENT, i);
		}
		public AexprRecAccessContext(A_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAexprRecAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAexprRecAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexprRecAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AexprSumContext : A_exprContext {
		public A_exprContext left;
		public IToken op;
		public A_exprContext right;
		public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(MicroCParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(MicroCParser.MINUS, 0); }
		public AexprSumContext(A_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAexprSum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAexprSum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexprSum(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AexprParenContext : A_exprContext {
		public ITerminalNode LPAREN() { return GetToken(MicroCParser.LPAREN, 0); }
		public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MicroCParser.RPAREN, 0); }
		public AexprParenContext(A_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAexprParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAexprParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexprParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AexprUnaryMinusContext : A_exprContext {
		public IToken op;
		public A_exprContext left;
		public ITerminalNode MINUS() { return GetToken(MicroCParser.MINUS, 0); }
		public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public AexprUnaryMinusContext(A_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAexprUnaryMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAexprUnaryMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexprUnaryMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AexprVarContext : A_exprContext {
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public AexprVarContext(A_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAexprVar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAexprVar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexprVar(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AexprArrayAccessContext : A_exprContext {
		public ITerminalNode IDENT() { return GetToken(MicroCParser.IDENT, 0); }
		public ITerminalNode LBRACKET() { return GetToken(MicroCParser.LBRACKET, 0); }
		public A_exprContext a_expr() {
			return GetRuleContext<A_exprContext>(0);
		}
		public ITerminalNode RBRACKET() { return GetToken(MicroCParser.RBRACKET, 0); }
		public AexprArrayAccessContext(A_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAexprArrayAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAexprArrayAccess(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexprArrayAccess(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AexprProductContext : A_exprContext {
		public A_exprContext left;
		public IToken op;
		public A_exprContext right;
		public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(MicroCParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(MicroCParser.DIV, 0); }
		public AexprProductContext(A_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAexprProduct(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAexprProduct(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexprProduct(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AexprLiteralContext : A_exprContext {
		public ITerminalNode NUMBER() { return GetToken(MicroCParser.NUMBER, 0); }
		public AexprLiteralContext(A_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterAexprLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitAexprLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAexprLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public A_exprContext a_expr() {
		return a_expr(0);
	}

	private A_exprContext a_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		A_exprContext _localctx = new A_exprContext(Context, _parentState);
		A_exprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_a_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				{
				_localctx = new AexprParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 160; Match(LPAREN);
				State = 161; a_expr(0);
				State = 162; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new AexprUnaryMinusContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 164; ((AexprUnaryMinusContext)_localctx).op = Match(MINUS);
				State = 165; ((AexprUnaryMinusContext)_localctx).left = a_expr(7);
				}
				break;
			case 3:
				{
				_localctx = new AexprVarContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 166; Match(IDENT);
				}
				break;
			case 4:
				{
				_localctx = new AexprArrayAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 167; Match(IDENT);
				State = 168; Match(LBRACKET);
				State = 169; a_expr(0);
				State = 170; Match(RBRACKET);
				}
				break;
			case 5:
				{
				_localctx = new AexprRecAccessContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 172; ((AexprRecAccessContext)_localctx).name = Match(IDENT);
				State = 173; Match(DOT);
				State = 174; ((AexprRecAccessContext)_localctx).field = Match(IDENT);
				}
				break;
			case 6:
				{
				_localctx = new AexprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 175; Match(NUMBER);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 186;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 184;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new AexprProductContext(new A_exprContext(_parentctx, _parentState));
						((AexprProductContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 178;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 179;
						((AexprProductContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((AexprProductContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 180; ((AexprProductContext)_localctx).right = a_expr(7);
						}
						break;
					case 2:
						{
						_localctx = new AexprSumContext(new A_exprContext(_parentctx, _parentState));
						((AexprSumContext)_localctx).left = _prevctx;
						PushNewRecursionContext(_localctx, _startState, RULE_a_expr);
						State = 181;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 182;
						((AexprSumContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AexprSumContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 183; ((AexprSumContext)_localctx).right = a_expr(6);
						}
						break;
					}
					} 
				}
				State = 188;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class B_exprContext : ParserRuleContext {
		public B_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_expr; } }
	 
		public B_exprContext() { }
		public virtual void CopyFrom(B_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BexprNotContext : B_exprContext {
		public ITerminalNode NOT() { return GetToken(MicroCParser.NOT, 0); }
		public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		public BexprNotContext(B_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterBexprNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitBexprNot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BexprParenContext : B_exprContext {
		public ITerminalNode LPAREN() { return GetToken(MicroCParser.LPAREN, 0); }
		public B_exprContext b_expr() {
			return GetRuleContext<B_exprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(MicroCParser.RPAREN, 0); }
		public BexprParenContext(B_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterBexprParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitBexprParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RexprBinopContext : B_exprContext {
		public A_exprContext left;
		public IToken rop;
		public A_exprContext right;
		public A_exprContext[] a_expr() {
			return GetRuleContexts<A_exprContext>();
		}
		public A_exprContext a_expr(int i) {
			return GetRuleContext<A_exprContext>(i);
		}
		public ITerminalNode LT() { return GetToken(MicroCParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(MicroCParser.GT, 0); }
		public ITerminalNode LTEQ() { return GetToken(MicroCParser.LTEQ, 0); }
		public ITerminalNode GTEQ() { return GetToken(MicroCParser.GTEQ, 0); }
		public ITerminalNode EQ() { return GetToken(MicroCParser.EQ, 0); }
		public ITerminalNode NOTEQ() { return GetToken(MicroCParser.NOTEQ, 0); }
		public RexprBinopContext(B_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterRexprBinop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitRexprBinop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRexprBinop(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BexprLitContext : B_exprContext {
		public IToken value;
		public ITerminalNode TRUE() { return GetToken(MicroCParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(MicroCParser.FALSE, 0); }
		public BexprLitContext(B_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterBexprLit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitBexprLit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprLit(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BexprBinopContext : B_exprContext {
		public B_exprContext left;
		public IToken bop;
		public B_exprContext right;
		public B_exprContext[] b_expr() {
			return GetRuleContexts<B_exprContext>();
		}
		public B_exprContext b_expr(int i) {
			return GetRuleContext<B_exprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(MicroCParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(MicroCParser.OR, 0); }
		public BexprBinopContext(B_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.EnterBexprBinop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMicroCListener typedListener = listener as IMicroCListener;
			if (typedListener != null) typedListener.ExitBexprBinop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMicroCVisitor<TResult> typedVisitor = visitor as IMicroCVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBexprBinop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public B_exprContext b_expr() {
		return b_expr(0);
	}

	private B_exprContext b_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		B_exprContext _localctx = new B_exprContext(Context, _parentState);
		B_exprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_b_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				_localctx = new BexprParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 190; Match(LPAREN);
				State = 191; b_expr(0);
				State = 192; Match(RPAREN);
				}
				break;
			case 2:
				{
				_localctx = new BexprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 194; Match(NOT);
				State = 195; b_expr(4);
				}
				break;
			case 3:
				{
				_localctx = new RexprBinopContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 196; ((RexprBinopContext)_localctx).left = a_expr(0);
				State = 197;
				((RexprBinopContext)_localctx).rop = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQ) | (1L << NOTEQ) | (1L << LTEQ) | (1L << GTEQ) | (1L << LT) | (1L << GT))) != 0)) ) {
					((RexprBinopContext)_localctx).rop = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 198; ((RexprBinopContext)_localctx).right = a_expr(0);
				}
				break;
			case 4:
				{
				_localctx = new BexprLitContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 200;
				((BexprLitContext)_localctx).value = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
					((BexprLitContext)_localctx).value = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BexprBinopContext(new B_exprContext(_parentctx, _parentState));
					((BexprBinopContext)_localctx).left = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_b_expr);
					State = 203;
					if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
					State = 204;
					((BexprBinopContext)_localctx).bop = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==OR || _la==AND) ) {
						((BexprBinopContext)_localctx).bop = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 205; ((BexprBinopContext)_localctx).right = b_expr(4);
					}
					} 
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return a_expr_sempred((A_exprContext)_localctx, predIndex);
		case 8: return b_expr_sempred((B_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool a_expr_sempred(A_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		}
		return true;
	}
	private bool b_expr_sempred(B_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '%', '\xD6', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '\x1A', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1D', '\v', '\x3', '\x3', '\x3', 
		'\x6', '\x3', ' ', '\n', '\x3', '\r', '\x3', '\xE', '\x3', '!', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', '(', '\n', 
		'\x4', '\f', '\x4', '\xE', '\x4', '+', '\v', '\x4', '\x3', '\x4', '\x6', 
		'\x4', '.', '\n', '\x4', '\r', '\x4', '\xE', '\x4', '/', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x6', '\x5', '\x36', '\n', 
		'\x5', '\r', '\x5', '\xE', '\x5', '\x37', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'I', '\n', '\x6', 
		'\f', '\x6', '\xE', '\x6', 'L', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'R', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\a', '\b', 'q', '\n', '\b', '\f', '\b', '\xE', '\b', 't', '\v', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\xA0', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\xB3', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\a', '\t', 
		'\xBB', '\n', '\t', '\f', '\t', '\xE', '\t', '\xBE', '\v', '\t', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x5', '\n', '\xCC', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\a', '\n', '\xD1', '\n', '\n', '\f', '\n', '\xE', '\n', '\xD4', 
		'\v', '\n', '\x3', '\n', '\x2', '\x4', '\x10', '\x12', '\v', '\x2', '\x4', 
		'\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x2', '\a', '\x3', '\x2', 
		'\x17', '\x18', '\x3', '\x2', '\x15', '\x16', '\x4', '\x2', '\f', '\xF', 
		'\x11', '\x12', '\x3', '\x2', '\t', '\n', '\x3', '\x2', '\x13', '\x14', 
		'\x2', '\xEA', '\x2', '\x14', '\x3', '\x2', '\x2', '\x2', '\x4', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '%', '\x3', '\x2', '\x2', '\x2', '\b', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\n', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\f', 'S', '\x3', '\x2', '\x2', '\x2', '\xE', '\x9F', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\xB2', '\x3', '\x2', '\x2', '\x2', '\x12', '\xCB', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x15', '\x5', '\x4', '\x3', '\x2', '\x15', 
		'\x16', '\a', '\x2', '\x2', '\x3', '\x16', '\x3', '\x3', '\x2', '\x2', 
		'\x2', '\x17', '\x1B', '\a', '\x1A', '\x2', '\x2', '\x18', '\x1A', '\x5', 
		'\n', '\x6', '\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x1B', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		' ', '\x5', '\xE', '\b', '\x2', '\x1F', '\x1E', '\x3', '\x2', '\x2', '\x2', 
		' ', '!', '\x3', '\x2', '\x2', '\x2', '!', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '!', '\"', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', '\x2', 
		'\x2', '\x2', '#', '$', '\a', '\x1B', '\x2', '\x2', '$', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '%', ')', '\a', '\x1A', '\x2', '\x2', '&', '(', '\x5', 
		'\n', '\x6', '\x2', '\'', '&', '\x3', '\x2', '\x2', '\x2', '(', '+', '\x3', 
		'\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', '\x2', '\x2', ')', '*', 
		'\x3', '\x2', '\x2', '\x2', '*', '-', '\x3', '\x2', '\x2', '\x2', '+', 
		')', '\x3', '\x2', '\x2', '\x2', ',', '.', '\x5', '\xE', '\b', '\x2', 
		'-', ',', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x3', '\x2', '\x2', '\x2', 
		'/', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\a', 
		'\x1B', '\x2', '\x2', '\x32', '\a', '\x3', '\x2', '\x2', '\x2', '\x33', 
		'\x35', '\a', '\x1A', '\x2', '\x2', '\x34', '\x36', '\x5', '\xE', '\b', 
		'\x2', '\x35', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x37', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x35', '\x3', '\x2', '\x2', '\x2', '\x37', 
		'\x38', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\x3', '\x2', '\x2', 
		'\x2', '\x39', ':', '\a', '\x1B', '\x2', '\x2', ':', '\t', '\x3', '\x2', 
		'\x2', '\x2', ';', '<', '\a', '\x3', '\x2', '\x2', '<', '=', '\a', '$', 
		'\x2', '\x2', '=', 'R', '\a', ' ', '\x2', '\x2', '>', '?', '\a', '\x3', 
		'\x2', '\x2', '?', '@', '\a', '\x1E', '\x2', '\x2', '@', '\x41', '\a', 
		'#', '\x2', '\x2', '\x41', '\x42', '\a', '\x1F', '\x2', '\x2', '\x42', 
		'\x43', '\a', '$', '\x2', '\x2', '\x43', 'R', '\a', ' ', '\x2', '\x2', 
		'\x44', '\x45', '\a', '\x1A', '\x2', '\x2', '\x45', 'J', '\x5', '\f', 
		'\a', '\x2', '\x46', 'G', '\a', ' ', '\x2', '\x2', 'G', 'I', '\x5', '\f', 
		'\a', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 'I', 'L', '\x3', 
		'\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\x3', 
		'\x2', '\x2', '\x2', 'K', 'M', '\x3', '\x2', '\x2', '\x2', 'L', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'N', '\a', '\x1B', '\x2', '\x2', 'N', 'O', '\a', 
		'$', '\x2', '\x2', 'O', 'P', '\a', ' ', '\x2', '\x2', 'P', 'R', '\x3', 
		'\x2', '\x2', '\x2', 'Q', ';', '\x3', '\x2', '\x2', '\x2', 'Q', '>', '\x3', 
		'\x2', '\x2', '\x2', 'Q', '\x44', '\x3', '\x2', '\x2', '\x2', 'R', '\v', 
		'\x3', '\x2', '\x2', '\x2', 'S', 'T', '\a', '\x3', '\x2', '\x2', 'T', 
		'U', '\a', '$', '\x2', '\x2', 'U', '\r', '\x3', '\x2', '\x2', '\x2', 'V', 
		'W', '\a', '$', '\x2', '\x2', 'W', 'X', '\a', '\x10', '\x2', '\x2', 'X', 
		'Y', '\x5', '\x10', '\t', '\x2', 'Y', 'Z', '\a', ' ', '\x2', '\x2', 'Z', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '[', '\\', '\a', '$', '\x2', '\x2', 
		'\\', ']', '\a', '\x1E', '\x2', '\x2', ']', '^', '\x5', '\x10', '\t', 
		'\x2', '^', '_', '\a', '\x1F', '\x2', '\x2', '_', '`', '\a', '\x10', '\x2', 
		'\x2', '`', '\x61', '\x5', '\x10', '\t', '\x2', '\x61', '\x62', '\a', 
		' ', '\x2', '\x2', '\x62', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x64', '\a', '$', '\x2', '\x2', '\x64', '\x65', '\a', '\"', '\x2', '\x2', 
		'\x65', '\x66', '\a', '$', '\x2', '\x2', '\x66', 'g', '\a', '\x10', '\x2', 
		'\x2', 'g', 'h', '\x5', '\x10', '\t', '\x2', 'h', 'i', '\a', ' ', '\x2', 
		'\x2', 'i', '\xA0', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '$', '\x2', 
		'\x2', 'k', 'l', '\a', '\x10', '\x2', '\x2', 'l', 'm', '\a', '\x1C', '\x2', 
		'\x2', 'm', 'r', '\x5', '\x10', '\t', '\x2', 'n', 'o', '\a', '!', '\x2', 
		'\x2', 'o', 'q', '\x5', '\x10', '\t', '\x2', 'p', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'q', 't', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', '\x2', '\x2', 
		'\x2', 'r', 's', '\x3', '\x2', '\x2', '\x2', 's', 'u', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x1D', '\x2', 
		'\x2', 'v', 'w', '\a', ' ', '\x2', '\x2', 'w', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\a', '\x4', '\x2', '\x2', 'y', 'z', '\a', '\x1C', '\x2', 
		'\x2', 'z', '{', '\x5', '\x12', '\n', '\x2', '{', '|', '\a', '\x1D', '\x2', 
		'\x2', '|', '}', '\x5', '\b', '\x5', '\x2', '}', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x7F', '\a', '\x4', '\x2', '\x2', '\x7F', '\x80', 
		'\a', '\x1C', '\x2', '\x2', '\x80', '\x81', '\x5', '\x12', '\n', '\x2', 
		'\x81', '\x82', '\a', '\x1D', '\x2', '\x2', '\x82', '\x83', '\x5', '\b', 
		'\x5', '\x2', '\x83', '\x84', '\a', '\x5', '\x2', '\x2', '\x84', '\x85', 
		'\x5', '\b', '\x5', '\x2', '\x85', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		'\x86', '\x87', '\a', '\x6', '\x2', '\x2', '\x87', '\x88', '\a', '\x1C', 
		'\x2', '\x2', '\x88', '\x89', '\x5', '\x12', '\n', '\x2', '\x89', '\x8A', 
		'\a', '\x1D', '\x2', '\x2', '\x8A', '\x8B', '\x5', '\b', '\x5', '\x2', 
		'\x8B', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\a', '\a', 
		'\x2', '\x2', '\x8D', '\x8E', '\a', '$', '\x2', '\x2', '\x8E', '\xA0', 
		'\a', ' ', '\x2', '\x2', '\x8F', '\x90', '\a', '\a', '\x2', '\x2', '\x90', 
		'\x91', '\a', '$', '\x2', '\x2', '\x91', '\x92', '\a', '\x1E', '\x2', 
		'\x2', '\x92', '\x93', '\x5', '\x10', '\t', '\x2', '\x93', '\x94', '\a', 
		'\x1F', '\x2', '\x2', '\x94', '\x95', '\a', ' ', '\x2', '\x2', '\x95', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', '\a', '\a', '\x2', 
		'\x2', '\x97', '\x98', '\a', '$', '\x2', '\x2', '\x98', '\x99', '\a', 
		'\"', '\x2', '\x2', '\x99', '\x9A', '\a', '$', '\x2', '\x2', '\x9A', '\xA0', 
		'\a', ' ', '\x2', '\x2', '\x9B', '\x9C', '\a', '\b', '\x2', '\x2', '\x9C', 
		'\x9D', '\x5', '\x10', '\t', '\x2', '\x9D', '\x9E', '\a', ' ', '\x2', 
		'\x2', '\x9E', '\xA0', '\x3', '\x2', '\x2', '\x2', '\x9F', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '[', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '\x9F', 'j', '\x3', '\x2', '\x2', 
		'\x2', '\x9F', 'x', '\x3', '\x2', '\x2', '\x2', '\x9F', '~', '\x3', '\x2', 
		'\x2', '\x2', '\x9F', '\x86', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x8C', 
		'\x3', '\x2', '\x2', '\x2', '\x9F', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9F', '\x9B', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\xF', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', 
		'\b', '\t', '\x1', '\x2', '\xA2', '\xA3', '\a', '\x1C', '\x2', '\x2', 
		'\xA3', '\xA4', '\x5', '\x10', '\t', '\x2', '\xA4', '\xA5', '\a', '\x1D', 
		'\x2', '\x2', '\xA5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA7', 
		'\a', '\x16', '\x2', '\x2', '\xA7', '\xB3', '\x5', '\x10', '\t', '\t', 
		'\xA8', '\xB3', '\a', '$', '\x2', '\x2', '\xA9', '\xAA', '\a', '$', '\x2', 
		'\x2', '\xAA', '\xAB', '\a', '\x1E', '\x2', '\x2', '\xAB', '\xAC', '\x5', 
		'\x10', '\t', '\x2', '\xAC', '\xAD', '\a', '\x1F', '\x2', '\x2', '\xAD', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\xAE', '\xAF', '\a', '$', '\x2', 
		'\x2', '\xAF', '\xB0', '\a', '\"', '\x2', '\x2', '\xB0', '\xB3', '\a', 
		'$', '\x2', '\x2', '\xB1', '\xB3', '\a', '#', '\x2', '\x2', '\xB2', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\xB2', '\xA6', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xA9', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB3', '\xBC', '\x3', '\x2', '\x2', '\x2', 
		'\xB4', '\xB5', '\f', '\b', '\x2', '\x2', '\xB5', '\xB6', '\t', '\x2', 
		'\x2', '\x2', '\xB6', '\xBB', '\x5', '\x10', '\t', '\t', '\xB7', '\xB8', 
		'\f', '\a', '\x2', '\x2', '\xB8', '\xB9', '\t', '\x3', '\x2', '\x2', '\xB9', 
		'\xBB', '\x5', '\x10', '\t', '\b', '\xBA', '\xB4', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xB7', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\xBD', '\x11', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\b', 
		'\n', '\x1', '\x2', '\xC0', '\xC1', '\a', '\x1C', '\x2', '\x2', '\xC1', 
		'\xC2', '\x5', '\x12', '\n', '\x2', '\xC2', '\xC3', '\a', '\x1D', '\x2', 
		'\x2', '\xC3', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC5', '\a', 
		'\v', '\x2', '\x2', '\xC5', '\xCC', '\x5', '\x12', '\n', '\x6', '\xC6', 
		'\xC7', '\x5', '\x10', '\t', '\x2', '\xC7', '\xC8', '\t', '\x4', '\x2', 
		'\x2', '\xC8', '\xC9', '\x5', '\x10', '\t', '\x2', '\xC9', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xCC', '\t', '\x5', '\x2', '\x2', '\xCB', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xC4', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\xCE', '\f', '\x5', '\x2', '\x2', '\xCE', '\xCF', '\t', '\x6', '\x2', 
		'\x2', '\xCF', '\xD1', '\x5', '\x12', '\n', '\x6', '\xD0', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\xD1', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD0', '\x3', '\x2', '\x2', '\x2', '\xD2', '\xD3', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\x13', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD2', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\x1B', '!', ')', '/', '\x37', 'J', 'Q', 
		'r', '\x9F', '\xB2', '\xBA', '\xBC', '\xCB', '\xD2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Parser.Generated
