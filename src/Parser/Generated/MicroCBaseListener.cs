//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sindrip/school/programanalysis/analysis-tool/src/Parser/MicroC.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser.Generated {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IMicroCListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class MicroCBaseListener : IMicroCListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MicroCParser.parse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParse([NotNull] MicroCParser.ParseContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MicroCParser.parse"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParse([NotNull] MicroCParser.ParseContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MicroCParser.globalBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterGlobalBlock([NotNull] MicroCParser.GlobalBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MicroCParser.globalBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitGlobalBlock([NotNull] MicroCParser.GlobalBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MicroCParser.scopedBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterScopedBlock([NotNull] MicroCParser.ScopedBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MicroCParser.scopedBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitScopedBlock([NotNull] MicroCParser.ScopedBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MicroCParser.unscopedBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterUnscopedBlock([NotNull] MicroCParser.UnscopedBlockContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MicroCParser.unscopedBlock"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitUnscopedBlock([NotNull] MicroCParser.UnscopedBlockContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>intDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIntDecl([NotNull] MicroCParser.IntDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>intDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIntDecl([NotNull] MicroCParser.IntDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArrayDecl([NotNull] MicroCParser.ArrayDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArrayDecl([NotNull] MicroCParser.ArrayDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>recDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRecDecl([NotNull] MicroCParser.RecDeclContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>recDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRecDecl([NotNull] MicroCParser.RecDeclContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="MicroCParser.fieldDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFieldDeclaration([NotNull] MicroCParser.FieldDeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="MicroCParser.fieldDeclaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFieldDeclaration([NotNull] MicroCParser.FieldDeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignStmt([NotNull] MicroCParser.AssignStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignStmt([NotNull] MicroCParser.AssignStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignArrayStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignArrayStmt([NotNull] MicroCParser.AssignArrayStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignArrayStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignArrayStmt([NotNull] MicroCParser.AssignArrayStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignFieldStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignFieldStmt([NotNull] MicroCParser.AssignFieldStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignFieldStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignFieldStmt([NotNull] MicroCParser.AssignFieldStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>assignRecStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignRecStmt([NotNull] MicroCParser.AssignRecStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assignRecStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignRecStmt([NotNull] MicroCParser.AssignRecStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStmt([NotNull] MicroCParser.IfStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStmt([NotNull] MicroCParser.IfStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ifElseStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfElseStmt([NotNull] MicroCParser.IfElseStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ifElseStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfElseStmt([NotNull] MicroCParser.IfElseStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStmt([NotNull] MicroCParser.WhileStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStmt([NotNull] MicroCParser.WhileStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>readStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReadStmt([NotNull] MicroCParser.ReadStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>readStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReadStmt([NotNull] MicroCParser.ReadStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>writeStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWriteStmt([NotNull] MicroCParser.WriteStmtContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>writeStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWriteStmt([NotNull] MicroCParser.WriteStmtContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprRecAccess</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAexprRecAccess([NotNull] MicroCParser.AexprRecAccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprRecAccess</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAexprRecAccess([NotNull] MicroCParser.AexprRecAccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprSum</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAexprSum([NotNull] MicroCParser.AexprSumContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprSum</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAexprSum([NotNull] MicroCParser.AexprSumContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprParen</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAexprParen([NotNull] MicroCParser.AexprParenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprParen</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAexprParen([NotNull] MicroCParser.AexprParenContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprVar</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAexprVar([NotNull] MicroCParser.AexprVarContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprVar</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAexprVar([NotNull] MicroCParser.AexprVarContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprArrayAccess</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAexprArrayAccess([NotNull] MicroCParser.AexprArrayAccessContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprArrayAccess</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAexprArrayAccess([NotNull] MicroCParser.AexprArrayAccessContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprProduct</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAexprProduct([NotNull] MicroCParser.AexprProductContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprProduct</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAexprProduct([NotNull] MicroCParser.AexprProductContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprLiteral</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAexprLiteral([NotNull] MicroCParser.AexprLiteralContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprLiteral</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAexprLiteral([NotNull] MicroCParser.AexprLiteralContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bexprNot</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBexprNot([NotNull] MicroCParser.BexprNotContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bexprNot</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBexprNot([NotNull] MicroCParser.BexprNotContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bexprParen</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBexprParen([NotNull] MicroCParser.BexprParenContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bexprParen</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBexprParen([NotNull] MicroCParser.BexprParenContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>rexprBinop</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRexprBinop([NotNull] MicroCParser.RexprBinopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>rexprBinop</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRexprBinop([NotNull] MicroCParser.RexprBinopContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bexprLit</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBexprLit([NotNull] MicroCParser.BexprLitContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bexprLit</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBexprLit([NotNull] MicroCParser.BexprLitContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bexprBinop</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBexprBinop([NotNull] MicroCParser.BexprBinopContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bexprBinop</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBexprBinop([NotNull] MicroCParser.BexprBinopContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Parser.Generated
