//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/sindrip/school/programanalysis/analysis-tool/cs-new/Parser/MicroC.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser.Generated {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="MicroCParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public interface IMicroCListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="MicroCParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParse([NotNull] MicroCParser.ParseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MicroCParser.parse"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParse([NotNull] MicroCParser.ParseContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MicroCParser.scopedBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScopedBlock([NotNull] MicroCParser.ScopedBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MicroCParser.scopedBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScopedBlock([NotNull] MicroCParser.ScopedBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="MicroCParser.unscopedBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterUnscopedBlock([NotNull] MicroCParser.UnscopedBlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="MicroCParser.unscopedBlock"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitUnscopedBlock([NotNull] MicroCParser.UnscopedBlockContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>intDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIntDecl([NotNull] MicroCParser.IntDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>intDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIntDecl([NotNull] MicroCParser.IntDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>arrayDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArrayDecl([NotNull] MicroCParser.ArrayDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arrayDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArrayDecl([NotNull] MicroCParser.ArrayDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>recDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRecDecl([NotNull] MicroCParser.RecDeclContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>recDecl</c>
	/// labeled alternative in <see cref="MicroCParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRecDecl([NotNull] MicroCParser.RecDeclContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignStmt([NotNull] MicroCParser.AssignStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignStmt([NotNull] MicroCParser.AssignStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignArrayStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignArrayStmt([NotNull] MicroCParser.AssignArrayStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignArrayStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignArrayStmt([NotNull] MicroCParser.AssignArrayStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignFieldStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignFieldStmt([NotNull] MicroCParser.AssignFieldStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignFieldStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignFieldStmt([NotNull] MicroCParser.AssignFieldStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>assignRecStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignRecStmt([NotNull] MicroCParser.AssignRecStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignRecStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignRecStmt([NotNull] MicroCParser.AssignRecStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStmt([NotNull] MicroCParser.IfStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStmt([NotNull] MicroCParser.IfStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ifElseStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfElseStmt([NotNull] MicroCParser.IfElseStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ifElseStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfElseStmt([NotNull] MicroCParser.IfElseStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>whileStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStmt([NotNull] MicroCParser.WhileStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>whileStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStmt([NotNull] MicroCParser.WhileStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>readStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadStmt([NotNull] MicroCParser.ReadStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>readStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadStmt([NotNull] MicroCParser.ReadStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>writeStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteStmt([NotNull] MicroCParser.WriteStmtContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>writeStmt</c>
	/// labeled alternative in <see cref="MicroCParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteStmt([NotNull] MicroCParser.WriteStmtContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprRecAccess</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAexprRecAccess([NotNull] MicroCParser.AexprRecAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprRecAccess</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAexprRecAccess([NotNull] MicroCParser.AexprRecAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprSum</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAexprSum([NotNull] MicroCParser.AexprSumContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprSum</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAexprSum([NotNull] MicroCParser.AexprSumContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprParen</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAexprParen([NotNull] MicroCParser.AexprParenContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprParen</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAexprParen([NotNull] MicroCParser.AexprParenContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprVar</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAexprVar([NotNull] MicroCParser.AexprVarContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprVar</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAexprVar([NotNull] MicroCParser.AexprVarContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprArrayAccess</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAexprArrayAccess([NotNull] MicroCParser.AexprArrayAccessContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprArrayAccess</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAexprArrayAccess([NotNull] MicroCParser.AexprArrayAccessContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprProduct</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAexprProduct([NotNull] MicroCParser.AexprProductContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprProduct</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAexprProduct([NotNull] MicroCParser.AexprProductContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>aexprLiteral</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAexprLiteral([NotNull] MicroCParser.AexprLiteralContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>aexprLiteral</c>
	/// labeled alternative in <see cref="MicroCParser.a_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAexprLiteral([NotNull] MicroCParser.AexprLiteralContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bexprNot</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBexprNot([NotNull] MicroCParser.BexprNotContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bexprNot</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBexprNot([NotNull] MicroCParser.BexprNotContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bexprParen</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBexprParen([NotNull] MicroCParser.BexprParenContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bexprParen</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBexprParen([NotNull] MicroCParser.BexprParenContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>rexprBinop</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRexprBinop([NotNull] MicroCParser.RexprBinopContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>rexprBinop</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRexprBinop([NotNull] MicroCParser.RexprBinopContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bexprLit</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBexprLit([NotNull] MicroCParser.BexprLitContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bexprLit</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBexprLit([NotNull] MicroCParser.BexprLitContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bexprBinop</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBexprBinop([NotNull] MicroCParser.BexprBinopContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bexprBinop</c>
	/// labeled alternative in <see cref="MicroCParser.b_expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBexprBinop([NotNull] MicroCParser.BexprBinopContext context);
}
} // namespace Parser.Generated
